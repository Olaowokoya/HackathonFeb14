#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
#  the License. A copy of the License is located at
#      http://aws.amazon.com/apache2.0/
#  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
#  CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and
#  limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: Role to be assumed by CodePipeline service cross account
Parameters:
  S3BucketCloudFormationFiles:
    Description: S3 Bucket in Dev Account, which holds the artifacts built by codebuild
    Type: String
    Default: 'hackathon-feb14-artifact-bucket-109882984759'
    
  DeployAccount:
    Description: AWS AccountNumber for share-tool Account
    Type: String
    Default: '109882984759'

  CPCrossAccountRoleName:
    Description: Codepipeline cross account role name for test env
    Type: String
    Default: 'ProdCodePipeline-Cross-Account-Role-hackathon-Feb14'

  CodePipelineCloudFormationDeployRoleName:
    Description: Cloudformation cross account role name for test env
    Type: String
    Default: 'ProdCodePipeline-cloudformation-cross-hackathon-feb14'

  KMSKeyArn:
    Description: ARN of the KMS key in Dev account
    Type: String
    Default: 'arn:aws:kms:us-east-1:109882984759:key/926300aa-a765-4788-8e0f-4a19bcfe27ea'

  ProjectName:
    Description: Name of the Project
    Type: String
    Default: 'hackathon-feb14'

  # *** The stack name for the actual application we're deploying
  ApplicationStackName:
    Type: String
    Default: 'hackathon-stack-feb14'
    AllowedPattern: "[A-Za-z0-9-]+"

Resources:
# Role required for cross account cloudformation stack creation with cdepipeline
  CPCrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CPCrossAccountRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              AWS:
                - !Ref DeployAccount
            Action:
              - sts:AssumeRole
      Path: /
      Tags: 
        - Key: "Application"
          Value: !Ref ApplicationStackName
        - Key: "ProjectName"
          Value: !Ref ProjectName
#Policy to be attached to Crossaccount codepipeline role
  CPCrossAccountRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub CPCrossAccountRolePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - cloudformation:*
              - s3:*
              - iam:PassRole
            Resource: "*"
          -
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref KMSKeyArn # Allow access to the KMS key in our deploy account
      Roles:
        -
          !Ref CPCrossAccountRole
#Service IAM role required for crossaccount cloudformation operation          
  CodePipelineCloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CodePipelineCloudFormationDeployRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
#Policies to be attached to the crossaccount cloudformation role
  CFDeployerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CFDeployerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - lambda:*
              - events:*
              - states:*
              - iam:CreateRole
              - iam:CreatePolicy
              - iam:GetRole
              - iam:DeleteRole
              - iam:PutRolePolicy
              - iam:PassRole
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy # Adjust all this here as required, whatever your stack needs
              - apigateway:*
              - cloudformation:*
              - kms:*
            Resource: "*"
          -
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
              - s3:GetObject
              - s3:ListBucket
            Resource:
             - !Join ['',['arn:aws:s3:::',!Ref S3BucketCloudFormationFiles, '/*']]
             - !Join ['',['arn:aws:s3:::',!Ref S3BucketCloudFormationFiles]]
             - 'arn:aws:s3:::awsserverlessrepo-*'
             - 'arn:aws:s3:::awsserverlessrepo-*/*'
          - 
            Action:
              - 'ssm:DescribeParameters'
              - 'ssm:AddTagsToResource'
              - 'ssm:DeleteParameter'
              - 'ssm:DeleteParameters'
              - 'ssm:DescribeDocumentParameters'
              - 'ssm:LabelParameterVersion'
              - 'ssm:GetParameter'
              - 'ssm:GetParameterHistory'
              - 'ssm:GetParametersByPath'
              - 'ssm:PutParameter'
              - 'ssm:RemoveTagsFromResource'
            Resource: '*'
            Effect: Allow
          - 
            Action:
              - 'states:CreateActivity'
              - 'states:GetActivityTask'
              - 'states:DeleteActivity'
              - 'states:DescribeActivity'
              - 'states:ListActivities'
              - 'states:SendTaskHeartbeat'
              - 'states:SendTaskFailure'
              - 'states:SendTaskSuccess'
              - 'states:TagResource'
              - 'states:UntagResource'
            Resource: '*'
            Effect: Allow
          - 
            Action:
              - 'ec2:DescribeAccountAttributes'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeVpcs'
              - 'ec2:CreateInternetGateway'
              - 'ec2:*'
            Resource: '*'
            Effect: Allow
          - 
            Action:
              - 'cloudtrail:CreateTrail'
              - 'cloudtrail:StartLogging'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:DescribeLogGroups'
              - 'logs:PutLogEvents'
            Resource: '*'
            Effect: Allow
          - 
            Action:
              - 'serverlessrepo:*'
              - 'serverlessrepo:GetCloudFormationTemplate'
              - 'serverlessrepo:CreateCloudFormationTemplate'
              - 'cloudformation:CreateChangeSet'
            Resource: '*'
            Effect: Allow
          - 
            Action:
              - 'serverless:*'
            Resource: '*'
            Effect: Allow            
          - 
            Action:
              - 'codestar-connections:UseConnection'
            Resource: '*'
            Effect: Allow
      Roles:
        -
          !Ref CodePipelineCloudFormationDeployRole

#Output values will be referenced in the main pipeline template
Outputs:
  CodePipelineCrossAccountRoleArn:
    Value: !GetAtt CPCrossAccountRole.Arn
  CFDeploymentCrossRoleArn:
    Value: !GetAtt CodePipelineCloudFormationDeployRole.Arn